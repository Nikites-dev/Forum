@using Forum.MongoDB
@using BlazorAnimate
@inject Forum.MongoDB.UserDbConnection userConnect
@inject NavigationManager NavigationManager
@inject Forum.RazorComponents.ErrorMessage ErrorMessage;

<div hidden="@IsActiveCard" class="cardSign">
    
     <div class="rowContent">
            <h3>@titleSign</h3>
     </div>
    
    <div hidden="@hidenUsername" class="rowContent">
        <p style="color: @itemColors[0]">Username</p>
        <input class="inputCard" @bind-value="@itemData[0]"/>
    </div>

    <div hidden="@hidenEmail" class="rowContent">
        <p style="color: @itemColors[1]">Email</p>
        <input class="inputCard" @bind-value="@itemData[1]"/>
    </div>


    <div hidden="@hidenPassword" class="rowContent">
        <p style="  color: @itemColors[2]">Password</p>
        <input type="password" class="inputCard" @bind-value="@itemData[2]"/>
    </div>

    <div hidden="@hidenConfirmP" class="rowContent">
        <p style="color: @itemColors[3]">Confirm password</p>
        <input type="password" class="inputCard" @bind-value="@itemData[3]"/>
    </div>
        
    

    <button class="btnSign" @onclick="@isValidate">@titleSign</button>
    <br/>
    <div>
        <p>Already have an account? <span style="color: #4807ed" @onclick="@ChangeSignMethod">@txtSign</span></p> 
    </div>
 
      
      <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" @ref="myAnim" IsManual="true">
          <ErrorMessage Title="@errTitle" Text="@errTxt"/>
      </Animate>
 
</div>


@code
{
    [Parameter]
    public bool IsActiveCard { get; set; }

    [CascadingParameter] String coin { get; set; }
    
    // hidden rows
    bool hidenUsername = false;
    bool hidenEmail = true;
    bool hidenPassword = false;
    bool hidenConfirmP = true;
    
    private Animate myAnim;
    
    // input data
    String itemUsername = ""; 
    String itemPassword = "";
    String itemEmail = "";
    String itemConfPassword = "";
    
    String errTitle= "";
    String errTxt = "";
    
    String titleSign = "Sign up";
    String txtSign = "Sign in";
    bool isSignUp = true;
    
    bool isError = false;
    
    // bool hideLabel = true;

    String colorGray = "#494949";
    String colorBlack = "black";
    String colorGreen = "#6dce83";
    String colorRed = "#fc3f1d";
    String colorCurrent = "red";

    String colorUsername = "";
    String colorEmail = "";
    String colorPassword = "";
    String colorConfirmP = "";

    List<String> itemColors = new List<string>(); 
    List<String> itemData = new List<string>(); 


    protected override void OnInitialized()
    {
        itemColors = new List<string>() {colorUsername, colorEmail, colorPassword, colorConfirmP};
        itemData = new List<string>() {itemUsername, itemEmail, itemPassword, itemConfPassword};

        CheckFields(colorBlack, colorBlack);
        ChangeSignMethod();
    }

    public void isValidate()
    {
        if (isSignUp)
        {
            CheckFields(colorGreen, colorRed);
            if (itemData[0] != "" && itemData[1] != "" && itemData[2] != ""  && itemData[3] != "" && itemData[2] == itemData[3])
            {
                User newUser = new User();
                newUser.Username = itemData[0]; 
                newUser.Email = itemData[1];
                newUser.Password = itemData[2];
                
                UserDbConnection.AddToDatabase(newUser);
                userConnect.isLoginUser = newUser;
                NavigationManager.NavigateTo("profile");
                IsActiveCard = true;
            }
            else
            {
                isError = true;
                errTitle = "error3";
                errTxt = "text3";
            }
        }
        else
        {
            itemColors[0] = colorBlack;
            itemColors[2] = colorBlack;
            if (itemData[0] != "" && itemData[2] != "")
            {
                userConnect.isLoginUser = UserDbConnection.GetUserByUsernamePassword(itemData[0], itemData[2]);

                if (userConnect.isLoginUser != null)
                {
                    NavigationManager.NavigateTo("profile");
                    IsActiveCard = true;
                }
                else
                {
                    errTitle = "error1";
                    errTxt = "text1";
                    isError = true;
                }
            }
            else
            {
                errTitle = "error2";
                errTxt = "text2";
                isError = true;
            }
        }
        
        myAnim.Run();
    }

    void OnChangeUsername()
    {
        
    }

    void BtnSignClick()
    {
        
        // NavigationManager.NavigateTo("profile");
    }

    void CheckFields(String colorY, String colorN)
    {
        for (var i = 0; i < itemData.Count; i++)
        {
            if (itemData[i] == "")
            {
                itemColors[i] = colorN;
            }
            else
            {
                itemColors[i] = colorGreen;
                
                if (itemData[2] == itemData[3])
                {
                    itemColors[2] = colorGreen;
                    itemColors[3] = colorGreen;
                }
                else
                {
                    itemColors[2] = colorRed;
                    itemColors[3] = colorRed;
                }
            }
        }
        StateHasChanged();
    }

    void ChangeSignMethod()
    {
        if (isSignUp)
        {
            isSignUp = false;
            titleSign = "Sign in";
            txtSign = "Sign up";
            
            
            hidenEmail = true;
            hidenConfirmP = true;
        }
        else
        {
            isSignUp = true;
            titleSign = "Sign up";
            txtSign = "Sign in";

            hidenEmail = false;
            hidenConfirmP = false;
        }
    }
}


