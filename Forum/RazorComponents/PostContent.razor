@using Forum.Services
@using System.Threading
@using Forum.MongoDB
@inject PostService PostService
@inject BehaviourService BehaviourService
@inject Forum.MongoDB.UserDbConnection UserDbConnection
@inject PostDbConnection PostDbConnection
@inject FileSystemService FileSystemService

<div class="content">
    @if (_posts != null)
    {
      @*  <div class="sortBox"> *@
            @* <div class="sortRow"> *@
            @*     $1$ <button @onclick="@Sort">Popular</button> #1# *@
            @*     <button>Fresh</button> *@
            @*     <button>Interest</button> *@
            @* </div> *@
      @*  </div>*@

        @foreach (var post in _posts)
        {
            <div class="postCard">
                <div class="leftSide">
                    @if (@post.Likes != null)
                    {
                        <p>@post.Likes.Count</p>
                    }
                    else
                    {
                        <p>0</p>
                    }
                    @if (UserDbConnection.isLoginUser == null)
                    {
                        <button class="btnLike" disabled="disabled" @onclick="(() => PutLike(post))"><img src="icons/Like.svg" alt="like"></button>
                    }
                    else
                    {
                        <button class="btnLike" @onclick="(() => PutLike(post))"><img src="icons/Like.svg" alt="like"></button>
                    }
                </div>

                <div class="rightSide">
                    <div class="rowCard1">
                        <div class="side1">
                            @if (GetUserImg(post.Username) != null)
                            {
                                DownloadLocalUserImg(GetUserImg(post.Username));
                                <img class="userImg" src="imgSource/@GetUserImg(post.Username)" alt="img"/>    
                            }
                            
                            <div class="columnText">
                                <p>@post.Username.ToString()</p>
                                <p> posted by <span>@post.CreatePost.ToString()</span></p>
                            </div>
                            
                        </div>
                        
                        
                        <p class="postInterest"> @post.Interest.ToString()</p>
                    </div>
                    @if (post.Text.Length < 20)
                    {
                        <div class="rowCard">
                            <p style="font-size: 25px">@post.Text</p>
                        </div>  
                    } else if (post.Text.Length >= 20 && post.Text.Length <= 210)
                    {
                        <div class="rowCard">
                            <p style="font-size: 20px">@post.Text</p>
                        </div>   
                    }
                    else
                    {
                        <div class="rowCard">
                            <p style="font-size: 15px">@post.Text</p>
                        </div>   
                    }
                    @if (@post.NameImage != null)
                    {
                        <div class="rowCard">
                            @{
                                FileSystemService.DownloadToLocalByName(@post.NameImage, "imgSource");
                            }
                            
                            <img class="imgPost" src="imgSource/@post.NameImage" alt="img"/>
                        </div>    
                    }
                      
                    
                    
                    <div class="rowCard">
                        @if (post.Comments != null)
                        {
                            <button class="btnComment" @onclick="(() => CommmentRemote(post))"> @post.Comments.Count.ToString() Comments</button>
                        }
                        else
                        {
                            <button class="btnComment" @onclick="(() => CommmentRemote(post))">add first comment</button>
                        }
                    </div>
                </div>
            </div>
        }
    }
    <CommentPost PostChoose="@selectPost"/>
</div>

@code {
    List<Comment> comments;
    List<Post> _posts;
    bool hideCmntBtn = true;
    bool hideCmntComponent = false;
    Post selectPost = new Post(); 
    
    [Parameter]
    public User RegUser { get; set; }
    
    [Parameter]
    public String SortName { get; set; }
    
    protected override void OnInitialized()
    {
        BehaviourService.isShowCommentContent = true;
        StateHasChanged();
        GetPosts();
        DataUpdating();
    }
    
    public async Task DataUpdating()
    {
        while(true) {
            StateHasChanged();
            GetPosts();
            await Task.Delay(500);
        }
    }

    String? GetUserImg(String username)
    {
        User user = UserDbConnection.GetUserByUsername(username);
        return user.NameImage;
    }
    
    void DownloadLocalUserImg(String username)
    {
        FileSystemService.DownloadToLocalByName(username, "imgSource");
    }

    void GetPosts()
    {
        if (RegUser != null && SortName == "profile")
        {
            _posts = PostDbConnection.FindUserPostsByUsername(RegUser.Username);
        }
        else
        {
            if(BehaviourService.SelectInterest == String.Empty)
            {
                _posts = PostService.GetPosts();     
            }
            else
            {
                _posts = PostDbConnection.FindUserPostsByInterest(BehaviourService.SelectInterest);    
            }
        }
    }

   

    void PutLike(Post post)
    {
        bool alreadyLike = false;
        if (post.Likes != null)
        {
            foreach (var likes in post.Likes)
            {
                if (likes == UserDbConnection.isLoginUser.Username)
                {
                    alreadyLike = true;
                }
            }
        }

        if (alreadyLike == false)
        {
            post.Likes.Add(UserDbConnection.isLoginUser.Username);
        }
        else
        {
            post.Likes.Remove(UserDbConnection.isLoginUser.Username);
        }
        PostDbConnection.UpdatePost(post);
    }

    void CommmentRemote(Post post)
    {
        selectPost = post;
        BehaviourService.isShowCommentContent = false;
    }
}

