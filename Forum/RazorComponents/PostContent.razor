@using Forum.Services
@using System.Threading
@using Forum.MongoDB
@using System.ComponentModel.DataAnnotations
@inject PostService PostService
@inject BehaviourService BehaviourService
@inject Forum.MongoDB.UserDbConnection UserDbConnection
@inject PostDbConnection PostDbConnection
@inject FileSystemService FileSystemService
@inject NavigationManager NavigationManager

<div class="content">
    @if (_posts != null)
    {
        <div class="sortBox">
                <button class="btnSort" style="background: @strBgColors[0]" @onclick="() => OnClickSort(radioName1)"><img src="icons/Popular.svg" alt="img" style="filter: invert(0.2)"> <p style="color: @strColors[0]">Popular</p></button> 
                <button class="btnSort" style="background: @strBgColors[1]" @onclick="() => OnClickSort(radioName2)"><img src="icons/Fresh.svg" style="filter: invert(0.2)"/> <p style="color: @strColors[1]">New</p></button> 
                <button class="btnSort" style="background: @strBgColors[2]" @onclick="() => OnClickSort(radioName3)"><img src="icons/Hot.svg" style="filter: invert(0.2)"/> <p style="color: @strColors[2]">Hot</p></button>
            </div>
        
        @foreach (var post in _posts)
        {
            <p>@Search</p>
            <p>ывыв</p>
            <div class="postCard">
                <div class="leftSide">
                    @if (@post.Likes != null)
                    {
                        <p>@post.Likes.Count</p>
                    }
                    else
                    {
                        <p>0</p>
                    }
                    @if (UserDbConnection.isLoginUser == null)
                    {
                        <button class="btnLike" disabled="disabled" @onclick="(() => PutLike(post))"><img src="icons/Like.svg" alt="like"></button>
                    }
                    else
                    {
                        if(@CheckLike(@post)) {
                        <button class="btnLike" @onclick="(() => PutLike(post))"><img src="icons/LikeColored.svg" alt="like" style=" filter: invert(13%) sepia(94%) saturate(7466%) hue-rotate(0deg) brightness(94%) contrast(115%);"></button>
                        } else {
                        <button class="btnLike" @onclick="(() => PutLike(post))"><img src="icons/Like.svg" alt="like"></button>
                        }
                        
                    }
                </div>

                <div class="rightSide">
                    <div class="rowCard1">
                        <div class="side1">
                            @if (GetUserImg(post.Username) != null)
                            {
                                DownloadLocalUserImg(GetUserImg(post.Username));
                                <img class="userImg" src="imgSource/@GetUserImg(post.Username)" alt="img"/>    
                            }
                            <div class="columnText">
                                <p>@post.Username.ToString()</p>
                                <p> posted by <span>@post.CreatePost.ToString()</span></p>
                            </div>
                            
                        </div>
                        
                        @if (BehaviourService.isProfile)
                        {
                            <div class="side1">
                                <button class="postDelete" @onclick="(() => DeletePost(post))"><img src="icons/Delete.svg"/></button>
                                <p class="postInterest"> @post.Interest.ToString()</p>
                            </div>    
                        }
                        else
                        {
                            <div class="side1">
                                <p class="postInterest"> @post.Interest.ToString()</p>
                            </div>    
                        }
                        
                        
                    </div>
                    
                    @if (post.Text.Length < 20)
                    {
                        <div class="rowCard">
                            <p style="font-style: @SetTextStyle(post.TextCursive); font-weight: @SetTextWeight(post.TextBold); font-size: 25px">@post.Text</p>
                        </div>  
                    } else if (post.Text.Length >= 20 && post.Text.Length <= 210)
                    {
                        <div class="rowCard">
                    <p style="font-style: @SetTextStyle(post.TextCursive); font-weight: @SetTextWeight(post.TextBold); font-size: 20px">@post.Text</p>
                        </div>   
                    }
                    else
                    {
                        <div class="rowCard">
                           <p style="font-style: @SetTextStyle(post.TextCursive); font-weight: @SetTextWeight(post.TextBold); font-size: 15px">@post.Text</p>
                        </div>   
                    }
                    @if (@post.NameImage != null)
                    {
                        <div class="rowCard">
                            @{
                                FileSystemService.DownloadToLocalByName(@post.NameImage, "imgSource");
                            }
                            
                            <img class="imgPost" src="imgSource/@post.NameImage" alt="img"/>
                        </div>    
                    }
                      
                    
                    
                    <div class="rowCard">
                        @if (post.Comments != null)
                        {
                            <button class="btnComment" @onclick="(() => CommmentRemote(post))"><img src="icons/Comment.svg" alt="like" > @post.Comments.Count.ToString() Comments</button>
                        }
                        else
                        {
                            <button class="btnComment" @onclick="(() => CommmentRemote(post))">add first comment</button>
                        }
                    </div>
                </div>
            </div>
        }
        
        @if (_posts.Count == 0)
        {
            <div class="cardNotFound">
                <p>Hm... we couldn’t find any results for <span><u>@_currentInterest</u></span></p>
            </div>
        }
        else
        {
            <div class="footer">
                <div class="sortBox">
                    <button disabled="@(indxPosts == 0 ? true : false)" class="btnSort" style="background: @strBgColors[0]" @onclick="@PreviosPage">
                        <p style="color: @strColors[0]">Previous</p>
                    </button>

                    <button class="btnSort" style="background: @strBgColors[2]" @onclick="@NextPage">
                        <p style="color: @strColors[2]">_posts.Count</p>
                        <p style="color: @strColors[2]">@_posts.Count</p>
                    </button> 
                    
                    <button class="btnSort" style="background: @strBgColors[2]" @onclick="@NextPage">
                        <p style="color: @strColors[2]">allPosts.Count</p>
                        <p style="color: @strColors[2]">@allPosts.Count</p>
                    </button>
                    
                    <button class="btnSort" style="background: @strBgColors[2]" @onclick="@NextPage">
                        <p style="color: @strColors[2]">indxPosts</p>
                        <p style="color: @strColors[2]">@indxPosts</p>
                    </button>
                    
                    @if (@SetActiveBtnNext())
                    {
                        <button class="btnSort" style="background: @strBgColors[2]" @onclick="@NextPage">
                            <p style="color: @strColors[2]">Next</p>
                        </button>
                    }
                </div>  
            </div>
        }
    }
    else 
    {
        <div class="cardNotFound">
            <p>Hm... we couldn’t find any results for <span><u>@_currentInterest</u></span></p>
        </div>
    }
    
    <CommentPost PostChoose="@selectPost"/>
</div>



@code {
    List<Comment> comments;
    List<Post> _posts;
    bool hideCmntBtn = true;
    bool hideCmntComponent = false;
    Post selectPost = new Post()    ;
    String crntSort = "Popular";
    
    int countPosts = 5;
    int indxPosts = 0;
    List<Post> allPosts = new List<Post>();
    
    String radioName1 = "Popular";
    String radioName2 = "New";
    String radioName3 = "Hot";
    String _currentInterest = "";
    
    List<Post> _currentListPosts = new List<Post>();
    
    private bool textBold = false;
    private bool textCursive = false;
    
    private String fontStyle = "";
    private String fontWeight = "";
    
    String dataChange = "";
    String textSearch = "";
    
    List<double> filterInverts = new List<double>() {0.5, 0.5, 0.1};
    List<String> strBgColors = new List<string>() {"white", "white", "white"};
    List<String> strColors = new List<string>() {"#898b8c", "#898b8c", "#898b8c"};

    [Parameter]
    public User RegUser { get; set; }
    
    [Parameter]
    public String SortName { get; set; }
    
    [Parameter]
    public bool IsProflie { get; set; }

    [Parameter]
    public String Filter
    {
        get => _currentInterest;
        set 
        {
            if (_currentInterest != value)
            {
                _currentInterest = value;
                OnValueChangedAsync(); // вызываем метод при изменении значения
            }
        }
    }
    
    [Parameter]
    public String Search
    {
        get => textSearch;
        set
        {
            textSearch = value;
            OnValueChangedAsync();
        }
    }
    

    [Parameter]
    public String DataChange
    {
        get => dataChange;
        set
        {
            OnValueChangedAsync();
        }
    }

    protected override void OnInitialized()
    {
        BehaviourService.isShowCommentContent = true;
        StateHasChanged();
        //GetPosts();
        GetPosts();
        //OnTopicSelect += GetPosts;
        DataUpdating();
        // BehaviourService.isProfile = false;
        SortPosts();
    }
    
    [Parameter]
    public Action<String> onDataChanged { get; set; }
                            
    private void FilterChanged(String text)
    {
        onDataChanged?.Invoke(text);
        _currentInterest = text;
        GetPosts();
        StateHasChanged();
    }

  


    protected override async Task OnParametersSetAsync()
    {
        await OnValueChangedAsync(); // вызываем метод при каждом изменении параметров компонента
    }
    
    
    private async Task OnValueChangedAsync()
    {
        indxPosts = 0;
        GetPosts();
     
        SortPosts(crntSort);
       
        StateHasChanged();
    }
    
    
    
    public async Task DataUpdating()
    {
     //   while(true) {
            // if (_currentListPosts != PostService.posts)
            // {
            //     _currentListPosts = PostService.posts;
            //     GetPosts();
            // }    
            //

            _currentInterest = Filter;  
        GetPosts();
            // if (_currentInterest != BehaviourService.SelectInterest)
            // {
            //     _currentInterest = BehaviourService.SelectInterest;
            //     
            // }      
            
            // _currentInterest = BehaviourService.SelectInterest;
            // GetPosts();
            
            // if (RegUser != null && SortName == "profile")
            // {
            //     _posts = PostDbConnection.FindUserPostsByUsername(RegUser.Username);
            // } 
            StateHasChanged();
            await Task.Delay(1000);
    //    }
    }

    String? GetUserImg(String username)
    {
        User user = UserDbConnection.GetUserByUsername(username);
        return user.NameImage;
    }
    
    void DownloadLocalUserImg(String username)
    {
        FileSystemService.DownloadToLocalByName(username, "imgSource");
    }

    void GetPosts()
    {

        if (BehaviourService.isProfile)
        {
            
            try
            {
                if(Filter == null || Filter == String.Empty)
                {
                    _posts = PostDbConnection.FindUserPostsByUsername(RegUser.Username);  
                }
                else
                {
                    _posts = PostDbConnection.FindUserPostsByUsername(RegUser.Username).Where(x => x.Interest == Filter).ToList();
                   // _posts = PostDbConnection.FindUserPostsByInterest(Filter);    
                }
            }
            catch (Exception e)
            {
                _posts = PostDbConnection.FindUserPostsByUsername(RegUser.Username);
            }
            
        }
        else
        {
            try
            {
                if(Filter == null || Filter == String.Empty)
                {
                    _posts = PostService.GetPosts();     
                }
                else
                {
                    _posts = PostDbConnection.FindUserPostsByInterest(Filter);    
                }
            }
            catch (Exception e)
            {
                _posts = PostService.GetPosts();
            }
        }
        
        SearchChanged();
    }

   

    void PutLike(Post post)
    {
        bool alreadyLike = CheckLike(post);
       
        if (alreadyLike == false)
        {
            post.Likes.Add(UserDbConnection.isLoginUser.Username);
        }
        else
        {
            post.Likes.Remove(UserDbConnection.isLoginUser.Username);
        }
        PostDbConnection.UpdatePost(post);
    }

    bool CheckLike(Post post)
    {
        bool alreadyLike = false;
        if (post.Likes != null)
        {
            foreach (var likes in post.Likes)
            {
                if (likes == UserDbConnection.isLoginUser.Username)
                {
                    alreadyLike = true;
                }
            }
        }

       return alreadyLike;
    }

    void CommmentRemote(Post post)
    {
        selectPost = post;
        BehaviourService.isShowCommentContent = false;
    }


    void OnClickSort(String sortName)
    {
        indxPosts = 0;
        SortPosts(sortName);
    }
    
    void SortPosts(String sortName)
    {
        try
        {
            GetPosts();
            crntSort = sortName;
        
            allPosts = new List<Post>();
            
            switch (sortName)
            {
                case "Popular":
                    strBgColors[0] = "#f6f7f8";
                    strBgColors[1] = "white";
                    strBgColors[2] = "white";
                
                    strColors[0] = "black";
                    strColors[1] = "#898b8c";
                    strColors[2] = "#898b8c";

                    allPosts = _posts.OrderByDescending(o => o.Likes.Count).ToList();
                    
                    break;
                case "New":
                    strBgColors[0] = "white";
                    strBgColors[1] = "#f6f7f8";
                    strBgColors[2] = "white";
                
                    strColors[0] = "#898b8c";
                    strColors[1] = "black";
                    strColors[2] = "#898b8c";

                    allPosts = _posts.OrderByDescending(o => o.CreatePost).ToList();

                    break;
                case "Hot":
                    strBgColors[0] = "white";
                    strBgColors[1] = "white";
                    strBgColors[2] = "#f6f7f8";
                
                    strColors[0] = "#898b8c";
                    strColors[1] = "#898b8c";
                    strColors[2] = "black";
                
                    allPosts = _posts.OrderByDescending(o => o.Comments.Count).ToList();
                    break;
            }
            
            
            if (indxPosts + countPosts < allPosts.Count)
            {
                _posts = allPosts.GetRange(indxPosts, countPosts);
            }
            else
            {
                try
                {
                    _posts = allPosts.GetRange(indxPosts, allPosts.Count-indxPosts);
                }
                catch (Exception e)
                {
                    _posts = null;
                }
               
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    
    void SortPosts()
    {
        try
        {
            switch (crntSort)
            {
                case "Popular":
                    _posts = _posts.OrderByDescending(o => o.Likes.Count).ToList().GetRange(indxPosts, countPosts);
                    break;
                case "New":
                    _posts = _posts.OrderByDescending(o => o.CreatePost).ToList().GetRange(indxPosts, countPosts);
                    break;
                case "Hot":
                    _posts = _posts.OrderByDescending(o => o.Comments.Count).ToList().GetRange(indxPosts, countPosts);
                    break;
            }        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
      
    }
    
    String SetTextStyle(bool isItalic)
    {
        if (isItalic)
        {
            return "italic";
           
        }
        return "normal";
    }
    
    String SetTextWeight(bool isBold)
    {
        if (isBold)
        {
            return "bold";
           
        }
        return "";
    }

    void NextPage()
    {
        indxPosts += countPosts;
      //  GetPosts();
       
        SortPosts(crntSort);
        
       // NavigationManager.NavigateTo("/");
    }
    
    void PreviosPage()
    {
        indxPosts -= countPosts;
        GetPosts();

        
        SortPosts(crntSort);
        

     //   NavigationManager.NavigateTo("/");
    }

    void DeletePost(Post post)
    {
        PostDbConnection.DeletePost(post);
        GetPosts();
        StateHasChanged();
    }

    bool SetActiveBtnNext()
    {
        if (_posts.Count + indxPosts == allPosts.Count)
        {
            return false;
        }
        return true;
    }
    
    private void SearchChanged()
    {
        if (_posts == null)
        {
            return; 
        }
        
        if (Search == null)
        {
            return;
        }
        
        
    if (Search == "")
    {
    return;
    }
    else
    {
        // _posts.Clear();
        // GetPosts();

        _posts = _posts.Where(
            x => x.Text.ToLower().Contains(Search) ||
                 x.Username.ToLower().Contains(Search) ||
                 x.CreatePost.ToShortDateString().Contains(Search)
            ).ToList();
        
        StateHasChanged();
    }
    }

}

