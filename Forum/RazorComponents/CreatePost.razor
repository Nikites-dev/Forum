@using Forum.Services
@using Forum.MongoDB
@using System.IO
@inject Forum.MongoDB.UserDbConnection userConnect
@inject PostService postService

<div class="cardCreate">
    <div class="types">
        <button>Post</button>
        <InputFile OnChange="@LoadFiles" class="btnDb" multiple/>
        <button>Link</button>
    </div>
    
    <div class="box">
        <div class="tools">
            <button>Bold</button> 
            <button>Cursive</button> 
            <button>Heading</button> 
            <button>Link</button> 
        </div>
        <div class="inputField">
            <label class="control-label">Message</label>
            <textarea rows="4" value="@EmailMessage" @onchange="@((args) => EmailMessage = args.Value.ToString())"></textarea>
        </div>
         
       
    </div>
   
     <div class="card_img">
          
           <img src="imgSource/kap3.jpeg"  alt="img"/>
       </div>
    
    <div class="bottom">
        <button @onclick="@CreateNewPost">Create</button>
    </div>
</div>

@code {

    string? path;
    string? fileName;
    List<string> names = new List<string>();
    List<IBrowserFile> _loadedFiles = new();
    List<String> loadImgNames = new List<string>();
    
    private String edImgName = "";
    
    List<String> imgNames = FileSystemService.GetNamesOfDir();

    protected override void OnInitialized()
    {
        FileSystemService sService = new FileSystemService();
    //sService.UploadImageToDb();
        loadImgNames = sService.DownloadToLocal();
        
        imgNames = FileSystemService.GetNamesOfDir();
    }
    
    void CreateNewPost()
    {
        Post post = new Post();
        // post.Username = "user" + RandomGeneratorId.GetRndNumber();
        post.Username = userConnect.isLoginUser.Username;
        post.Comments = new List<Comment>();
        post.Rating = 234;
        post.Text = emailMessage.ToString();
        post.CreatePost = DateTime.Now;
        post.Likes = new List<string>();

        postService.AddPost(post);
        
        PostDbConnection.AddToDatabase(post);

        StateHasChanged();
    }
    
    private string emailMessage = "";
    
    public string EmailMessage
    {
        get =>  emailMessage;
        set
        {
            if (emailMessage != value)
            {
                emailMessage = ((MarkupString)value).ToString();
            }
        }
    }
    
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        _loadedFiles.Clear();
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {
            _loadedFiles.Add(file);
            
            Stream stream = file.OpenReadStream();
            
            
            await FileSystemService.UploadImageToDbAsync(stream, file.Name);
            stream.Dispose();
        }
    // LoadNames();
        FileSystemService sService = new FileSystemService();
        loadImgNames = sService.DownloadToLocal();
        imgNames = FileSystemService.GetNamesOfDir();
    }  
}