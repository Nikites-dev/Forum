@using Forum.Services
@using Forum.MongoDB
@using System.IO
@inject Forum.MongoDB.UserDbConnection userConnect
@inject PostService postService
@inject NavigationManager _navigationManager
@inject FileSystemService FileSystemService

<div class="cardCreate">
    <div class="types">
        <button>Post</button>
        <InputFile OnChange="@OnSubmit" class="btnDb" multiple/>
        <button>Link</button>
    </div>
    
    <div class="box">
        <div class="tools">
            <button>Bold</button> 
            <button>Cursive</button> 
            <button>Heading</button> 
            <button>Link</button> 
        </div>
        <div class="inputField">
            <label class="control-label">Message</label>
            <textarea rows="4" value="@EmailMessage" @onchange="@((args) => EmailMessage = args.Value.ToString())"></textarea>
        </div>
         
       
    </div>
     @if (fileName != "")
     {
        <div class="card_img">
            <img src="imgCreate/@fileName" alt="img"/>
        </div>
    }
    <div class="bottom">
        <button @onclick="@CreateNewPost">Create</button>
    </div>
</div>

@code {

    string? path;
    string fileName;
    List<string> names = new List<string>();
    List<IBrowserFile> _loadedFiles = new();
    List<String> loadImgNames = new List<string>();
    
    private String edImgName = "";
    
 //   List<String> imgNames = FileSystemService.GetNamesOfDir();

    protected override void OnInitialized()
    {
        FileSystemService sService = new FileSystemService();
        loadImgNames = sService.DownloadToLocal();
       // imgNames = FileSystemService.GetNamesOfDir();
    }
    
    public void  GetNamesOfDir()
    {
        String path = $"{Directory.CreateDirectory(Directory.GetCurrentDirectory() + "/wwwroot/imgCreate/")}";
        path = path.Replace("/", @"\");
        DirectoryInfo info = new DirectoryInfo($"{path}");

        List<String> listNames = new List<string>();
        
        foreach (var item in info.GetFiles())
        {
            listNames.Add(item.Name);
        }
        
        if (listNames.Count > 1)
        {
            RemoveFolder();
        }
        if (listNames.Count == 1)
        {
            fileName = listNames[0].ToString();
        }
    }
    
    void CreateNewPost()
    {
        Post post = new Post();
        post.Username = userConnect.isLoginUser.Username;
        post.Comments = new List<Comment>();
        post.Rating = 234;
        post.NameImage = fileName;
        post.Text = emailMessage.ToString();
        post.CreatePost = DateTime.Now;
        post.Likes = new List<string>();

        postService.AddPost(post);
        
        PostDbConnection.AddToDatabase(post);
        FileSystemService.UploadCreateImgToDb();
        
        StateHasChanged();
    }
    
    private string emailMessage = "";
    
    public string EmailMessage
    {
        get =>  emailMessage;
        set
        {
            if (emailMessage != value)
            {
                emailMessage = ((MarkupString)value).ToString();
            }
        }
    }

   

    private async Task OnSubmit(InputFileChangeEventArgs e)
    {
        try
        {
            RemoveFolder();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
      
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {
            try
            {
                // fileName = file.Name;
                Stream stream = file.OpenReadStream();
                var path = $"{Directory.CreateDirectory(Directory.GetCurrentDirectory() + "/wwwroot/imgCreate/")}{file.Name}";
                FileStream fs = File.Create(path);
                await stream.CopyToAsync(fs);
                stream.Close();
                fs.Close();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                throw;
            }
        }
      //  _navigationManager.NavigateTo("profile");
        GetNamesOfDir();
       // StateHasChanged();
    }
    
    public  void DeleteImgLocal(String name)
    {
    // String path = $"C:/Users/Petov/source/repos/BlazorPMLabsUnits/BlazorPMLabsUnits/wwwroot/imgSource/{name}";
        String path = $"{Directory.CreateDirectory(Directory.GetCurrentDirectory() + "/wwwroot/imgCreate/")}{name}";
           
        FileInfo file = new FileInfo(path);
        file.Delete();
    }
    
    void NevigateToYourUrl()
    {
        _navigationManager.NavigateTo("profile");
        StateHasChanged();
    }

    public static void RemoveFolder()
    {
        String path = $"{Directory.CreateDirectory(Directory.GetCurrentDirectory() + "/wwwroot/imgCreate/")}";
        DirectoryInfo dirInfo = new DirectoryInfo(path);
 
        foreach (FileInfo f in dirInfo.GetFiles())
        {
            f.Delete();
        }
    }

    // private async Task LoadFiles(InputFileChangeEventArgs e)
    // {
    //     _loadedFiles.Clear();
    //     foreach (var file in e.GetMultipleFiles(e.FileCount))
    //     {
    //         _loadedFiles.Add(file);
    //         Stream stream = file.OpenReadStream();
    //         
    //         await FileSystemService.UploadImageToDbAsync(stream, file.Name);
    //         stream.Dispose();
    //     }
    // // LoadNames();
    //     FileSystemService sService = new FileSystemService();
    //     loadImgNames = sService.DownloadToLocal();
    //     imgNames = FileSystemService.GetNamesOfDir();
    // }  
    //
    
    
}