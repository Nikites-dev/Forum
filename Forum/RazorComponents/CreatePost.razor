@using Forum.Services
@using Forum.MongoDB
@using System.IO
@inject Forum.MongoDB.UserDbConnection userConnect
@inject PostService postService
@inject NavigationManager _navigationManager
@inject FileSystemService FileSystemService
@inject Interests Interests
@inject ISnackbar Snackbar

<div class="cardCreate">
    
    <div class="box">

        <div class="boxInterest">
               @if (listInterests != null || listInterests.Count != 0)
                {
                    <select class="selectInterest" @bind="@valueInterest">
                         <option value="">Choose a community</option>
                        @foreach (var interest in listInterests)
                        {
                            <option value="@interest">@interest</option>
                        }
                    </select>
                }
        </div>

        <div class="tools">
            <button class="btnTool"><img class="imgTool" src="icons/TextBold.svg" alt="img" @onclick="SetTextWeight"/></button>
            <button class="btnTool"><img class="imgTool" src="icons/TextItalic.svg" alt="img" @onclick="SetTextSyle"/></button>

            <label for="filePicker" class="label">
                <span class="title"><img class="imgtool" src="icons/Image.svg" alt="img"/></span>
                <InputFile id="filePicker" class="invisible" OnChange="@OnSubmit" multiple></InputFile>
            </label>



            @* <p>@valueInterest</p> *@

        </div>
        <div class="inputField" >
            @* <label class="control-label">Message</label> *@
            <textarea style="font-style: @fontStyle; font-weight: @fontWeight" rows="4" placeholder="What are your thoughts?" value="@EmailMessage" @onchange="@((args) => EmailMessage = args.Value.ToString())"></textarea>
        </div>


    </div>
    @if (fileName != null)
    {
        <div class="card_img">
            <img class="imgPost" src="imgCreate/@fileName" alt="img"/>
        </div>
    }
    <div class="bottom">
        <button @onclick="@CreateNewPost">Create</button>
    </div>
</div>

@code {
    string? path;
    string fileName;
    List<string> names = new List<string>();
    List<IBrowserFile> _loadedFiles = new();
    List<String> loadImgNames = new List<string>();
    
    private String fontStyle = "";
    private String fontWeight = "";
    
    private String edImgName = "";
    private List<String> listInterests = Models.Interests.GetListInterest();
    private String valueInterest = "";

    String dataChange = "";
    
    protected override void OnInitialized()
    {
        FileSystemService sService = new FileSystemService();
        listInterests = Models.Interests.GetListInterest();
    }
    
    public void  GetNamesOfDir()
    {
        String path = $"{Directory.CreateDirectory(Directory.GetCurrentDirectory() + "/wwwroot/imgCreate/")}";
        path = path.Replace("/", @"\");
        DirectoryInfo info = new DirectoryInfo($"{path}");

        List<String> listNames = new List<string>();
        
        foreach (var item in info.GetFiles())
        {
            listNames.Add(item.Name);
        }
        
        if (listNames.Count > 1)
        {
            RemoveFolder();
        }
        if (listNames.Count == 1)
        {
            fileName = listNames[0].ToString();
        }
        
    }
    
    void CreateNewPost()
    {
        if (valueInterest == "")
        {
            Snackbar.Add("Select interest!", Severity.Error, config => { config.ShowCloseIcon = false; });
            return;
        }

        if (emailMessage == "")
        {
            Snackbar.Add("Write text!", Severity.Error, config => { config.ShowCloseIcon = false; });
            return;
        }

        if (fileName == "")
        {
            Snackbar.Add("Write text!", Severity.Error, config => { config.ShowCloseIcon = false; });
            return;
        }

        try
        {
            Post post = new Post();
            post.Username = userConnect.isLoginUser.Username;
            post.Comments = new List<Comment>();
            post.Interest = valueInterest;
            post.NameImage = fileName;
            post.Text = emailMessage.ToString();
            post.CreatePost = DateTime.Now;
            post.Likes = new List<string>();
            post.TextBold = textBold;
            post.TextCursive = textCursive;

            postService.AddPost(post);

            PostDbConnection.AddToDatabase(post);
            FileSystemService.UploadCreateImgToDb();


            valueInterest = "";
            emailMessage = "";
            fileName = null;
            Snackbar.Add("Post create!", Severity.Success, config => { config.ShowCloseIcon = false; });
            
            onDataChanged?.Invoke(dataChange);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            Snackbar.Add("Something wrong!", Severity.Warning, config => { config.ShowCloseIcon = false; });
        }
        

        StateHasChanged();
    }
    
    private string emailMessage = "";
    private bool textBold = false;
    private bool textCursive = false;
    private String ChangeData { get; set; }
    public string EmailMessage
    {
        get =>  emailMessage;
        set
        {
            if (emailMessage != value)
            {
                emailMessage = ((MarkupString)value).ToString();
            }
        }
    }

    private async Task OnSubmit(InputFileChangeEventArgs e)
    {
        try
        {
            RemoveFolder();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Snackbar.Add("Wrong remove folder", Severity.Warning, config => { config.ShowCloseIcon = false; });
        }
      
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {
            try
            {
                // fileName = file.Name;
                Stream stream = file.OpenReadStream();
                var path = $"{Directory.CreateDirectory(Directory.GetCurrentDirectory() + "/wwwroot/imgCreate/")}{file.Name}";
                path = path.Replace("/", @"\");
                FileStream fs = File.Create(path);
                await stream.CopyToAsync(fs);
                stream.Close();
                fs.Close();
               // StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                Snackbar.Add("Something wrong", Severity.Warning, config => { config.ShowCloseIcon = false; });
            }
        }
        GetNamesOfDir();
    }
    
    public  void DeleteImgLocal(String name)
    {
        String path = $"{Directory.CreateDirectory(Directory.GetCurrentDirectory() + "/wwwroot/imgCreate/")}{name}";
           
        FileInfo file = new FileInfo(path);
        file.Delete();
    }
    
    void NevigateToYourUrl()
    {
        _navigationManager.NavigateTo("profile");
        StateHasChanged();
    }

    public static void RemoveFolder()
    {
        String path = $"{Directory.CreateDirectory(Directory.GetCurrentDirectory() + "/wwwroot/imgCreate/")}";
        DirectoryInfo dirInfo = new DirectoryInfo(path);
 
        foreach (FileInfo f in dirInfo.GetFiles())
        {
            f.Delete();
        }
    }
    
    void SetTextSyle()
    {
        if (textCursive)
        {
            textCursive = false;
            fontStyle = "normal";
        }
        else
        {
            textCursive = true;
            fontStyle = "italic";
        }
    }

    void SetTextWeight()
    {
        if (textBold)
        {
            textBold = false;
            fontWeight = "";
        }
        else
        {
            textBold = true;
            fontWeight = "bold";
        }
    }
    
    
    [Parameter]
    public Action<String> onDataChanged { get; set; }
}