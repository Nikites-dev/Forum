@using Forum.Services
@using Forum.MongoDB
@inject BehaviourService BehaviourService
@inject UserDbConnection UserDbConnection
@inject ISnackbar Snackbar

<div hidden="@BehaviourService.isShowCommentContent" class="background">
    @if (PostChoose.Username != null)
    {
        <div class="field">
            <div class="content1">
                <p>Comments</p>
                <button @onclick="@ShowCheck">&#66327; Close</button>
            </div>


            <div class="content2">
                <div class="card">
                    <div class="postCard">
                        <div class="leftSide">
                            @if (@PostChoose.Likes != null)
                            {
                                <p>@PostChoose.Likes.Count</p>
                            }
                            else
                            {
                                <p>0</p>
                            }
                            @if (UserDbConnection.isLoginUser == null)
                            {
                                <button class="btnLike" disabled="disabled" @onclick="(() => PutLike(PostChoose))">
                                    <img src="icons/Like.svg" alt="like">
                                </button>
                            }
                            else
                            {
                                if (@CheckLike(@PostChoose))
                                {
                                    <button class="btnLike" @onclick="(() => PutLike(PostChoose))">
                                        <img src="icons/LikeColored.svg" alt="like" style=" filter: invert(13%) sepia(94%) saturate(7466%) hue-rotate(0deg) brightness(94%) contrast(115%);">
                                    </button>
                                }
                                else
                                {
                                    <button class="btnLike" @onclick="(() => PutLike(PostChoose))">
                                        <img src="icons/Like.svg" alt="like">
                                    </button>
                                }
                            }
                        </div>

                        <div class="rightSide">

                            <div class="rowCard1">
                                <div class="side1">
                                    @if (GetUserImg(PostChoose.Username) != null)
                                    {
                                        <img class="userImg" src="imgSource/@GetUserImg(PostChoose.Username)" alt="img"/>
                                    }

                                    <div class="columnText">
                                        <p>@PostChoose.Username.ToString()</p>
                                        <p style="color: #9a9a9a"> posted by <span style="color: #9a9a9a">@PostChoose.CreatePost.ToString("dd.MM HH:mm")</span></p>
                                    </div>

                                </div>
                                <p class="postInterest"> @PostChoose.Interest.ToString()</p>
                            </div>


                            @if (PostChoose.Text.Length < 20)
                            {
                                <div class="rowCard">
                                    <p style="font-size: 25px">@PostChoose.Text</p>
                                </div>
                            }
                            else if (PostChoose.Text.Length >= 20 && PostChoose.Text.Length <= 210)
                            {
                                <div class="rowCard">
                                    <p style="font-size: 20px">@PostChoose.Text</p>
                                </div>
                            }
                            else
                            {
                                <div class="rowCard">
                                    <p style="font-size: 15px">@PostChoose.Text</p>
                                </div>
                            }
                            @if (@PostChoose.NameImage != null)
                            {
                                <div class="rowCard">
                                    @{
                                        FileSystemService.DownloadToLocalByName(@PostChoose.NameImage, "imgSource");
                                    }

                                    <img class="imgPost" src="imgSource/@PostChoose.NameImage" alt="img"/>
                                </div>
                            }


                            <div class="rowCard">
                                @if (PostChoose.Comments != null)
                                {
                                    <button class="btnComment" @onclick="(() => CommmentRemote(PostChoose))"><img src="icons/Comment.svg" alt="like"> @PostChoose.Comments.Count.ToString() Comments</button>
                                }
                                else
                                {
                                    <button class="btnComment" @onclick="(() => CommmentRemote(PostChoose))">add first comment</button>
                                }
                            </div>

                        </div>
                    </div>

                </div>

                <CreateComment onDataChanged="@OnDataChanged" CurrentPost="PostChoose"/>

                <div class="contentComments">
                    @if (PostChoose.Comments != null)
                    {
                        @foreach (var comment in PostChoose.Comments)
                        {
                            <div class="commentField">

                                @{
                                    FileSystemService.DownloadToLocalByName(GetUserImg(comment.Username), "imgSource");
                                }

                                <div class="headerComment">
                                    @if (GetUserImg(comment.Username) != null)
                                    {
                                        <img class="userImg" src="imgSource/@GetUserImg(comment.Username)" alt="img"/>
                                    }

                                    <div class="columnText">
                                        <p>@comment.Username</p>
                                    </div>
                                    <p class="point">·</p>
                                    @if (@comment.CreateComment != null)
                                    {
                                        <p style="color: #727272">@comment.CreateComment.ToString("dd.MM")</p>
                                        <p  style="color: #727272" class="point"></p>
                                        <p  style="color: #727272">@comment.CreateComment.ToString("HH:mm")</p>
                                    }
                                    
                                    
                                </div>
                                
                                <div class="textContent">
                                    
                                    <div class="emptyStick">
                                        &nbsp;
                                    </div>
                                    
                                    <div class="rowCard">
                                        <p style="font-size: 15px">@comment.Text</p>
                                    </div>

                                </div>
                                <hr class="rounded">
                            </div>
                        }
                    }
                </div>

                <div class="footer">
                    <p>ㅤ</p>
                </div>

            </div>

        </div>
    }
</div>

@code {

    [Parameter]
    public Post PostChoose { get; set; }

    private List<Comment> comments = new List<Comment>();
    private String Text { get; set; }

    Post selectPost = new Post();
    // [Parameter]
    // public bool HiddenContent { get; set; }


    protected override void OnInitialized()
    {
     //   comments =  PostChoose.Comments;
    }

    void ShowCheck()
    {
        BehaviourService.isShowCommentContent = true;
        StateHasChanged();
    }

    String? GetUserImg(String username)
    {
        User user = UserDbConnection.GetUserByUsername(username);
        return user.NameImage;
    }

    private void OnDataChanged(String text)
    {
        Text = text;
        PostChoose.Comments =  PostChoose.Comments;
        StateHasChanged();
    }


    void PutLike(Post post)
    {
        bool alreadyLike = CheckLike(post);

        if (alreadyLike == false)
        {
            post.Likes.Add(UserDbConnection.isLoginUser.Username);
        }
        else
        {
            post.Likes.Remove(UserDbConnection.isLoginUser.Username);
        }
        PostDbConnection.UpdatePost(post);
    }

    void CommmentRemote(Post post)
    {
        selectPost = post;
        BehaviourService.isShowCommentContent = false;
    }

    bool CheckLike(Post post)
    {
        bool alreadyLike = false;
        if (post.Likes != null)
        {
            foreach (var likes in post.Likes)
            {
                if (likes == UserDbConnection.isLoginUser.Username)
                {
                    alreadyLike = true;
                }
            }
        }

        return alreadyLike;
    }

}